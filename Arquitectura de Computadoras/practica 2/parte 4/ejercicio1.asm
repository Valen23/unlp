PA EQU 30H
PB EQU 31H
CA EQU 32H
CB EQU 33H
ORG 2000H
MOV AL, 0
OUT CB, AL ; CONFIGURO LAS LUCES COMO SALIDA
MOV AL, 0FFH
OUT CA, AL ; CONFIGURO LAS LLAVES COMO ENTRADA
COMIENZO:
MOV AL, 1 ; INICIALIZO AL EN (00000001)
IZQ:
OUT PB, AL ; ENVIO EL VALOR A LA SALIDA
CMP AL, 128 ; VERIFICO SI LLEGUÉ AL ULTIMO BIT (10000000)
JZ DER ; SI LLEGUÉ, SALTO A LA ETIQUETA 'DER'
ADD AL, AL ; SI NO, MULTIPLICO AL (MUEVO UN BIT A LA IZQUIERDA)
JMP IZQ
DER:
MOV DH, 7 ; INICIALIZO DH PARA HACER UN CONTADOR HASTA LA POSICION DEL BIT 6 (0 A 7)
MOV BH, 1 ; CUENTO EN BH LA REPETICION POR LA QUE VOY 
MOV DL, 1 ; USO DL PARA ALMACENAR LOS BITS QUE VOY A MULTIPLICAR Y EMPIEZO POR 1
LOOP:
CMP DH, 1 ; VERIFICO SI LLEGUE AL PRIMER BIT, SI ES ASÍ, EMPIEZO NUEVAMENTE
JZ COMIENZO
ADD DL, DL ; MULTIPLICO
INC BH ; INCREMENTO BH PARA INDICAR QUE VOY POR LA POSICION SIGUIENTE
CMP BH, DH ; VERIFICO SI LLEGUE A HACERLO LA CANTIDAD DE VECES QUE INDICA DH
JNZ LOOP ; SI NO LLEGUE REPITO
DEC DH
MOV AL, DL ; MUEVO A AL EL RESULTADO DE MULTIPLICAR DL TANTAS VECES LO DIGA DH
OUT PB, AL ; ENCIENDO EL LED QUE INDICA DL
MOV BH, 1 ; REINICIO NUEVAMENTE EL CONTADOR 
MOV DL, 1 ; EMPIEZO A MULTIPLICAR POR 1
JZ COMIENZO
JMP LOOP
INT 0
END

; Escribir un programa que encienda una luz a la vez, de las ocho conectadas al puerto paralelo del
; microprocesador a través de la PIO, en el siguiente orden de bits:
; 0-1-2-3-4-5-6-7-6-5-4-3-2-1-0-1-2-3-4-5-6-7-6-5-4-3-2-1-0-1-..., es decir, 00000001, 00000010,
; 00000100, etc. El programa nunca termina. Para ello, deberá utilizar las subrutinas ROTAR_IZQ y
; ROTAR_DER_N, que le permitirán rotar el bit de estado de las luces y generar el juego
; correspondiente.
